global !p

def upperfirst(t):
	if len(t) < 2:
		return '' if len(t) < 1 else t.capitalize()
	return t[0].capitalize() + t[1:]

def lowerdash(t):
	return '-'.join([ w.lower() for w in re.findall('[a-z]+|[A-Z]+[a-z]*', t) ])
endglobal

snippet imp "import package that converts from camelCase or PascalCase to kebab-cased" b
import $1 from '$2`!p snip.rv=lowerdash(t[1])`';
endsnippet

snippet impf "import File from './File'" b
import $1 from '${2:./}${3:$1}';
endsnippet

snippet impn "import { nested } from" b
import { $1 } from '$2';
endsnippet

snippet impa "import * as Thing from" b
import * as $1 from "$2`!p snip.rv=lowerdash(t[1])`";
endsnippet

# ==========================================
# React Snippets
#
snippet rcf "React function" b
import React from 'react';
import PropTypes from 'prop-types';

const ${1:`!v expand('%:t:r')`} = ({ ...rest }) => {
	return null;
}

$1.propTypes = {};

export default $1;
endsnippet


# ==========================================
# Prop Types Section
#

# Inline prop types
snippet pt.a "PropTypes.array" w
PropTypes.array
endsnippet

snippet pt.ar "PropTypes.array.isRequired" w
PropTypes.array.isRequired
endsnippet

snippet pt.b "PropTypes.bool" w
PropTypes.bool
endsnippet

snippet pt.br "PropTypes.bool.isRequired" w
PropTypes.bool.isRequired
endsnippet

snippet pt.f "PropTypes.func" w
PropTypes.func
endsnippet

snippet pt.fr "PropTypes.func.isRequired" w
PropTypes.func.isRequired
endsnippet

snippet pt.nu "PropTypes.number" w
PropTypes.number
endsnippet

snippet pt.nur "PropTypes.number.isRequired" w
PropTypes.number.isRequired
endsnippet

snippet pt.o "PropTypes.object" w
PropTypes.object
endsnippet

snippet pt.or "PropTypes.object.isRequired" w
PropTypes.object.isRequired
endsnippet

snippet pt.s "PropTyes.string" w
PropTypes.string
endsnippet

snippet pt.sr "PropTyes.string.isRequired" w
PropTypes.string.isRequired
endsnippet

snippet pt.no "PropTypes.node" w
PropTypes.node
endsnippet

snippet pt.nor "PropTypes.node.isRequired" w
PropTypes.node.isRequired
endsnippet

snippet pt.e "PropTypes.element" w
PropTypes.element
endsnippet

snippet pt.er "PropTypes.element.isRequired" w
PropTypes.element.isRequired
endsnippet

snippet pt.ao "PropTypes.arrayOf()" w
PropTypes.arrayOf(${1:PropTypes.string})
endsnippet

snippet pt.aor "PropTypes.arrayOf().isRequired" w
PropTypes.arrayOf(${1:PropTypes.string}).isRequired
endsnippet

snippet pt.io "PropTypes.instanceOf()" w
PropTypes.instanceOf(${1:PropTypes.string})
endsnippet

snippet pt.ior "PropTypes.instanceOf().isRequired" w
PropTypes.instanceOf(${1:PropTypes.string}).isRequired
endsnippet

snippet pt.oo "PropTypes.objectOf()" w
PropTypes.objectOf(${1:PropTypes.string})
endsnippet

snippet pt.oor "PropTypes.objectOf().isRequired" w
PropTypes.objectOf(${1:PropTypes.string}).isRequired
endsnippet

snippet pt.one "PropTypes.oneOf([])" w
PropTypes.oneOf(['$1'$2])
endsnippet

snippet pt.oner "PropTypes.oneOf([]).isRequired" w
PropTypes.oneOf(['$1'$2]).isRequired
endsnippet

snippet pt.onet "PropTYpes.oneOfType([])" w
PropTypes.oneOfType([
	$1
])
endsnippet

snippet pt.onetr "PropTYpes.oneOfType([]).isRequired" w
PropTypes.oneOfType([
	$1
]).isRequired
endsnippet

snippet pt.sh "PropTypes.shape" w
PropTypes.shape({
	$1
})
endsnippet

snippet pt.shr "PropTypes.shape.isRequired" w
PropTypes.shape({
	$1
}).isRequired
endsnippet
